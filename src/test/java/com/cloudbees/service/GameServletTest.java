package com.cloudbees.service;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.junit.Test;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.ws.rs.core.Response;

import com.cloudbees.model.Game;

public class GameServletTest {

	// DAO sub-class for JUnit tests
	private Connection conn;
	DAO dao = new DAO() {
		public void connect() {
			  String url = "jdbc:mysql://ec2-50-19-213-178.compute-1.amazonaws.com:3306/mp_test";
			  String driver = "com.mysql.jdbc.Driver";
			  String userName = "mp_test"; 
			  String password = "welcome1";
			  
			  try {
				  Class.forName(driver).newInstance();
				  conn = DriverManager.getConnection(url,userName,password);
				  super.setConnection(conn);
			  }
			  catch(Exception e) {
				  e.printStackTrace();
			  }
			  finally {			  
			  }
		}
	};

	// GameServlet sub-class for Junit testing
	class TestGameServlet extends GameServlet {
		private static final long serialVersionUID = 1L;

		TestGameServlet() {
			super.setDAO(dao);
		}			
	}
	
	// Stores game id generated by testNewGame()
	private long id = 0;
	
	// Test strings
	private String testWhite = "White Player";
	private String testBlack = "Black Player";
	private String testDescription = "Game Description";
	private String testResult = "";
	
	@Test
	public void testGetGame() {
		
		// First run testNewGame() to set game id
		testNewGame();
		long testId = this.id;
		assertFalse (testId == 0);

		TestGameServlet gameServlet = new TestGameServlet();
		Response response;
		response = gameServlet.getGame( testId );
		
		assertFalse( response == null );
		assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());
		
		// Iterate over JSON elements in response
		String reply = "{reply:" + response.getEntity().toString() + "}";
		JSONObject jObject;
		try {
			jObject = new JSONObject(reply);
			JSONObject json = jObject.getJSONObject("reply");
			assertFalse( json == null );

			Map<String,String> map = new HashMap<String,String>();
			Iterator<?> iter = json.keys();
			while(iter.hasNext()){
				String key = (String)iter.next();
				String value = json.getString(key);
				map.put(key,value);
			}
			assertEquals( map.get("id"), Long.toString(testId) );
			assertEquals( map.get("white"), testWhite );
			assertEquals( map.get("black"), testBlack );
			assertEquals( map.get("description"), testDescription );
			assertEquals( map.get("result"), testResult );
			assertEquals( map.get("next"), "W" );
			assertEquals( map.get("move"), "1" );
		} 
		catch (JSONException e) {
			e.printStackTrace();
		}
		
	}

	@Test
	public void testNewGame() {
		
		TestGameServlet gameServlet = new TestGameServlet();
		Game game = new Game();
		game.setWhite( testWhite );
		game.setBlack( testBlack );
		game.setDescription( testDescription );
		game.setResult( testResult );
		
		Response response = gameServlet.newGame( game );	
		assertFalse( response == null );
		assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());
		
		// Retrieve "id" from JSON response body
		String reply = "{reply:" + response.getEntity().toString() + "}";
		JSONObject jObject;
		try {
			jObject = new JSONObject(reply);
			JSONObject json = jObject.getJSONObject("reply");
			assertFalse( json == null );
			String gameId = json.getString("id");
			assertFalse( gameId == null );

			// Save "id" value for use in combo tests
			this.id = Long.valueOf(gameId);
		} 
		catch (JSONException e) {
			e.printStackTrace();
		}
	}
}
